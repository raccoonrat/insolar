// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insolar/record/record.proto

package record

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GenesisRecord struct {
}

func (m *GenesisRecord) Reset()      { *m = GenesisRecord{} }
func (*GenesisRecord) ProtoMessage() {}
func (*GenesisRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{0}
}
func (m *GenesisRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisRecord.Merge(m, src)
}
func (m *GenesisRecord) XXX_Size() int {
	return m.Size()
}
func (m *GenesisRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisRecord proto.InternalMessageInfo

type ChildRecord struct {
	PrevChild github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,1,opt,name=PrevChild,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PrevChild"`
	Ref       github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Ref,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Ref"`
}

func (m *ChildRecord) Reset()      { *m = ChildRecord{} }
func (*ChildRecord) ProtoMessage() {}
func (*ChildRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{1}
}
func (m *ChildRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildRecord.Merge(m, src)
}
func (m *ChildRecord) XXX_Size() int {
	return m.Size()
}
func (m *ChildRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChildRecord proto.InternalMessageInfo

type JetRecord struct {
}

func (m *JetRecord) Reset()      { *m = JetRecord{} }
func (*JetRecord) ProtoMessage() {}
func (*JetRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{2}
}
func (m *JetRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JetRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JetRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JetRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JetRecord.Merge(m, src)
}
func (m *JetRecord) XXX_Size() int {
	return m.Size()
}
func (m *JetRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_JetRecord.DiscardUnknown(m)
}

var xxx_messageInfo_JetRecord proto.InternalMessageInfo

type RequestRecord struct {
	Object      github_com_insolar_insolar_insolar.ID `protobuf:"bytes,1,opt,name=Object,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"Object"`
	Parcel      []byte                                `protobuf:"bytes,2,opt,name=Parcel,proto3" json:"Parcel,omitempty"`
	MessageHash []byte                                `protobuf:"bytes,3,opt,name=MessageHash,proto3" json:"MessageHash,omitempty"`
}

func (m *RequestRecord) Reset()      { *m = RequestRecord{} }
func (*RequestRecord) ProtoMessage() {}
func (*RequestRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{3}
}
func (m *RequestRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRecord.Merge(m, src)
}
func (m *RequestRecord) XXX_Size() int {
	return m.Size()
}
func (m *RequestRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRecord proto.InternalMessageInfo

type ResultRecord struct {
	Object  github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,1,opt,name=Object,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"Object"`
	Request github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Payload []byte                                       `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (m *ResultRecord) Reset()      { *m = ResultRecord{} }
func (*ResultRecord) ProtoMessage() {}
func (*ResultRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{4}
}
func (m *ResultRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultRecord.Merge(m, src)
}
func (m *ResultRecord) XXX_Size() int {
	return m.Size()
}
func (m *ResultRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ResultRecord proto.InternalMessageInfo

type TypeRecord struct {
	Domain          github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request         github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	TypeDeclaration []byte                                       `protobuf:"bytes,3,opt,name=TypeDeclaration,proto3" json:"TypeDeclaration,omitempty"`
}

func (m *TypeRecord) Reset()      { *m = TypeRecord{} }
func (*TypeRecord) ProtoMessage() {}
func (*TypeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{5}
}
func (m *TypeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeRecord.Merge(m, src)
}
func (m *TypeRecord) XXX_Size() int {
	return m.Size()
}
func (m *TypeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TypeRecord proto.InternalMessageInfo

type CodeRecord struct {
	Domain      github_com_insolar_insolar_insolar.Reference   `protobuf:"bytes,1,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request     github_com_insolar_insolar_insolar.Reference   `protobuf:"bytes,2,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Code        github_com_insolar_insolar_insolar.ID          `protobuf:"bytes,3,opt,name=Code,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"Code"`
	MachineType github_com_insolar_insolar_insolar.MachineType `protobuf:"varint,4,opt,name=MachineType,proto3,customtype=github.com/insolar/insolar/insolar.MachineType" json:"MachineType"`
}

func (m *CodeRecord) Reset()      { *m = CodeRecord{} }
func (*CodeRecord) ProtoMessage() {}
func (*CodeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{6}
}
func (m *CodeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeRecord.Merge(m, src)
}
func (m *CodeRecord) XXX_Size() int {
	return m.Size()
}
func (m *CodeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CodeRecord proto.InternalMessageInfo

type ObjectActivateRecord struct {
	Domain      github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request     github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Memory      github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,3,opt,name=Memory,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"Memory"`
	Image       github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,4,opt,name=Image,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Image"`
	IsPrototype bool                                         `protobuf:"varint,5,opt,name=IsPrototype,proto3" json:"IsPrototype,omitempty"`
	Parent      github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,6,opt,name=Parent,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Parent"`
	IsDelegate  bool                                         `protobuf:"varint,7,opt,name=IsDelegate,proto3" json:"IsDelegate,omitempty"`
}

func (m *ObjectActivateRecord) Reset()      { *m = ObjectActivateRecord{} }
func (*ObjectActivateRecord) ProtoMessage() {}
func (*ObjectActivateRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{7}
}
func (m *ObjectActivateRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectActivateRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectActivateRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectActivateRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectActivateRecord.Merge(m, src)
}
func (m *ObjectActivateRecord) XXX_Size() int {
	return m.Size()
}
func (m *ObjectActivateRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectActivateRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectActivateRecord proto.InternalMessageInfo

type ObjectAmendRecord struct {
	Domain      github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request     github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Memory      github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,3,opt,name=Memory,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"Memory"`
	Image       github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,4,opt,name=Image,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Image"`
	IsPrototype bool                                         `protobuf:"varint,5,opt,name=IsPrototype,proto3" json:"IsPrototype,omitempty"`
	PrevState   github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,6,opt,name=PrevState,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PrevState"`
}

func (m *ObjectAmendRecord) Reset()      { *m = ObjectAmendRecord{} }
func (*ObjectAmendRecord) ProtoMessage() {}
func (*ObjectAmendRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{8}
}
func (m *ObjectAmendRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectAmendRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectAmendRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectAmendRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectAmendRecord.Merge(m, src)
}
func (m *ObjectAmendRecord) XXX_Size() int {
	return m.Size()
}
func (m *ObjectAmendRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectAmendRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectAmendRecord proto.InternalMessageInfo

type ObjectDeactivateRecord struct {
	Domain    github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request   github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	PrevState github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,3,opt,name=PrevState,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PrevState"`
}

func (m *ObjectDeactivateRecord) Reset()      { *m = ObjectDeactivateRecord{} }
func (*ObjectDeactivateRecord) ProtoMessage() {}
func (*ObjectDeactivateRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{9}
}
func (m *ObjectDeactivateRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectDeactivateRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectDeactivateRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectDeactivateRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectDeactivateRecord.Merge(m, src)
}
func (m *ObjectDeactivateRecord) XXX_Size() int {
	return m.Size()
}
func (m *ObjectDeactivateRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectDeactivateRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectDeactivateRecord proto.InternalMessageInfo

type Record struct {
	// Types that are valid to be assigned to Union:
	//	*Record_Genesis
	//	*Record_Child
	//	*Record_Jet
	//	*Record_Request
	//	*Record_Result
	//	*Record_Type
	//	*Record_Code
	//	*Record_ObjectActivate
	//	*Record_ObjectAmend
	//	*Record_ObjectDeactivate
	Union isRecord_Union `protobuf_oneof:"union"`
}

func (m *Record) Reset()      { *m = Record{} }
func (*Record) ProtoMessage() {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{10}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type isRecord_Union interface {
	isRecord_Union()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Record_Genesis struct {
	Genesis *GenesisRecord `protobuf:"bytes,100,opt,name=Genesis,proto3,oneof"`
}
type Record_Child struct {
	Child *ChildRecord `protobuf:"bytes,101,opt,name=Child,proto3,oneof"`
}
type Record_Jet struct {
	Jet *JetRecord `protobuf:"bytes,102,opt,name=Jet,proto3,oneof"`
}
type Record_Request struct {
	Request *RequestRecord `protobuf:"bytes,200,opt,name=Request,proto3,oneof"`
}
type Record_Result struct {
	Result *ResultRecord `protobuf:"bytes,300,opt,name=Result,proto3,oneof"`
}
type Record_Type struct {
	Type *TypeRecord `protobuf:"bytes,301,opt,name=Type,proto3,oneof"`
}
type Record_Code struct {
	Code *CodeRecord `protobuf:"bytes,302,opt,name=Code,proto3,oneof"`
}
type Record_ObjectActivate struct {
	ObjectActivate *ObjectActivateRecord `protobuf:"bytes,303,opt,name=ObjectActivate,proto3,oneof"`
}
type Record_ObjectAmend struct {
	ObjectAmend *ObjectAmendRecord `protobuf:"bytes,304,opt,name=ObjectAmend,proto3,oneof"`
}
type Record_ObjectDeactivate struct {
	ObjectDeactivate *ObjectDeactivateRecord `protobuf:"bytes,305,opt,name=ObjectDeactivate,proto3,oneof"`
}

func (*Record_Genesis) isRecord_Union()          {}
func (*Record_Child) isRecord_Union()            {}
func (*Record_Jet) isRecord_Union()              {}
func (*Record_Request) isRecord_Union()          {}
func (*Record_Result) isRecord_Union()           {}
func (*Record_Type) isRecord_Union()             {}
func (*Record_Code) isRecord_Union()             {}
func (*Record_ObjectActivate) isRecord_Union()   {}
func (*Record_ObjectAmend) isRecord_Union()      {}
func (*Record_ObjectDeactivate) isRecord_Union() {}

func (m *Record) GetUnion() isRecord_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (m *Record) GetGenesis() *GenesisRecord {
	if x, ok := m.GetUnion().(*Record_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *Record) GetChild() *ChildRecord {
	if x, ok := m.GetUnion().(*Record_Child); ok {
		return x.Child
	}
	return nil
}

func (m *Record) GetJet() *JetRecord {
	if x, ok := m.GetUnion().(*Record_Jet); ok {
		return x.Jet
	}
	return nil
}

func (m *Record) GetRequest() *RequestRecord {
	if x, ok := m.GetUnion().(*Record_Request); ok {
		return x.Request
	}
	return nil
}

func (m *Record) GetResult() *ResultRecord {
	if x, ok := m.GetUnion().(*Record_Result); ok {
		return x.Result
	}
	return nil
}

func (m *Record) GetType() *TypeRecord {
	if x, ok := m.GetUnion().(*Record_Type); ok {
		return x.Type
	}
	return nil
}

func (m *Record) GetCode() *CodeRecord {
	if x, ok := m.GetUnion().(*Record_Code); ok {
		return x.Code
	}
	return nil
}

func (m *Record) GetObjectActivate() *ObjectActivateRecord {
	if x, ok := m.GetUnion().(*Record_ObjectActivate); ok {
		return x.ObjectActivate
	}
	return nil
}

func (m *Record) GetObjectAmend() *ObjectAmendRecord {
	if x, ok := m.GetUnion().(*Record_ObjectAmend); ok {
		return x.ObjectAmend
	}
	return nil
}

func (m *Record) GetObjectDeactivate() *ObjectDeactivateRecord {
	if x, ok := m.GetUnion().(*Record_ObjectDeactivate); ok {
		return x.ObjectDeactivate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Record) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Record_OneofMarshaler, _Record_OneofUnmarshaler, _Record_OneofSizer, []interface{}{
		(*Record_Genesis)(nil),
		(*Record_Child)(nil),
		(*Record_Jet)(nil),
		(*Record_Request)(nil),
		(*Record_Result)(nil),
		(*Record_Type)(nil),
		(*Record_Code)(nil),
		(*Record_ObjectActivate)(nil),
		(*Record_ObjectAmend)(nil),
		(*Record_ObjectDeactivate)(nil),
	}
}

func _Record_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Record)
	// union
	switch x := m.Union.(type) {
	case *Record_Genesis:
		_ = b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *Record_Child:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Child); err != nil {
			return err
		}
	case *Record_Jet:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jet); err != nil {
			return err
		}
	case *Record_Request:
		_ = b.EncodeVarint(200<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *Record_Result:
		_ = b.EncodeVarint(300<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case *Record_Type:
		_ = b.EncodeVarint(301<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Type); err != nil {
			return err
		}
	case *Record_Code:
		_ = b.EncodeVarint(302<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *Record_ObjectActivate:
		_ = b.EncodeVarint(303<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObjectActivate); err != nil {
			return err
		}
	case *Record_ObjectAmend:
		_ = b.EncodeVarint(304<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObjectAmend); err != nil {
			return err
		}
	case *Record_ObjectDeactivate:
		_ = b.EncodeVarint(305<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObjectDeactivate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Record.Union has unexpected type %T", x)
	}
	return nil
}

func _Record_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Record)
	switch tag {
	case 100: // union.Genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenesisRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Genesis{msg}
		return true, err
	case 101: // union.Child
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChildRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Child{msg}
		return true, err
	case 102: // union.Jet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JetRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Jet{msg}
		return true, err
	case 200: // union.Request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Request{msg}
		return true, err
	case 300: // union.Result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResultRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Result{msg}
		return true, err
	case 301: // union.Type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Type{msg}
		return true, err
	case 302: // union.Code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_Code{msg}
		return true, err
	case 303: // union.ObjectActivate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectActivateRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_ObjectActivate{msg}
		return true, err
	case 304: // union.ObjectAmend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectAmendRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_ObjectAmend{msg}
		return true, err
	case 305: // union.ObjectDeactivate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObjectDeactivateRecord)
		err := b.DecodeMessage(msg)
		m.Union = &Record_ObjectDeactivate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Record_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Record)
	// union
	switch x := m.Union.(type) {
	case *Record_Genesis:
		s := proto.Size(x.Genesis)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_Child:
		s := proto.Size(x.Child)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_Jet:
		s := proto.Size(x.Jet)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_Request:
		s := proto.Size(x.Request)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_Result:
		s := proto.Size(x.Result)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_Type:
		s := proto.Size(x.Type)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_Code:
		s := proto.Size(x.Code)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_ObjectActivate:
		s := proto.Size(x.ObjectActivate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_ObjectAmend:
		s := proto.Size(x.ObjectAmend)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Record_ObjectDeactivate:
		s := proto.Size(x.ObjectDeactivate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GenesisRecord)(nil), "record.GenesisRecord")
	proto.RegisterType((*ChildRecord)(nil), "record.ChildRecord")
	proto.RegisterType((*JetRecord)(nil), "record.JetRecord")
	proto.RegisterType((*RequestRecord)(nil), "record.RequestRecord")
	proto.RegisterType((*ResultRecord)(nil), "record.ResultRecord")
	proto.RegisterType((*TypeRecord)(nil), "record.TypeRecord")
	proto.RegisterType((*CodeRecord)(nil), "record.CodeRecord")
	proto.RegisterType((*ObjectActivateRecord)(nil), "record.ObjectActivateRecord")
	proto.RegisterType((*ObjectAmendRecord)(nil), "record.ObjectAmendRecord")
	proto.RegisterType((*ObjectDeactivateRecord)(nil), "record.ObjectDeactivateRecord")
	proto.RegisterType((*Record)(nil), "record.Record")
}

func init() { proto.RegisterFile("insolar/record/record.proto", fileDescriptor_0c86cc3f6f53fe45) }

var fileDescriptor_0c86cc3f6f53fe45 = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbd, 0x6f, 0xdb, 0x46,
	0x14, 0xbf, 0xd3, 0x07, 0x55, 0x3f, 0xd9, 0x6d, 0x7d, 0xb5, 0x0d, 0xf6, 0x03, 0x67, 0xc1, 0x80,
	0x01, 0x15, 0xad, 0x25, 0xd4, 0x2d, 0x8a, 0xa2, 0x43, 0x01, 0xcb, 0x72, 0x4d, 0xb9, 0x55, 0x2b,
	0x5c, 0x32, 0x64, 0xa5, 0xa8, 0x93, 0xc4, 0x40, 0x22, 0x1d, 0x92, 0x32, 0xe0, 0x2d, 0x6b, 0xb6,
	0x4c, 0x99, 0x33, 0x1a, 0xc8, 0xf7, 0x98, 0x3f, 0x20, 0x80, 0x96, 0x00, 0x1e, 0x0d, 0x03, 0x31,
	0x22, 0x79, 0xc9, 0xe8, 0x3f, 0x21, 0xe0, 0xdd, 0x31, 0xa2, 0x94, 0x0c, 0x8e, 0xec, 0x0c, 0x06,
	0x32, 0x49, 0xf7, 0xf8, 0x7e, 0x3f, 0xbe, 0xf7, 0x7b, 0xc7, 0xf7, 0x1e, 0x7c, 0x6f, 0x3b, 0xbe,
	0xdb, 0x31, 0xbd, 0xa2, 0xc7, 0x2d, 0xd7, 0x6b, 0xa8, 0x9f, 0xc2, 0xae, 0xe7, 0x06, 0x2e, 0xd1,
	0xe4, 0xe9, 0xbb, 0xb5, 0x96, 0x1d, 0xb4, 0x7b, 0xf5, 0x82, 0xe5, 0x76, 0x8b, 0x2d, 0xb7, 0xe5,
	0x16, 0xc5, 0xe3, 0x7a, 0xaf, 0x29, 0x4e, 0xe2, 0x20, 0xfe, 0x49, 0xd8, 0xca, 0x22, 0xcc, 0x6d,
	0x73, 0x87, 0xfb, 0xb6, 0xcf, 0x04, 0xfe, 0xcf, 0xd4, 0xc1, 0xfd, 0x65, 0xbc, 0x72, 0x80, 0x21,
	0xbb, 0xd9, 0xb6, 0x3b, 0x0d, 0x69, 0x25, 0xff, 0xc0, 0x4c, 0xcd, 0xe3, 0x7b, 0xc2, 0xa4, 0xe3,
	0x1c, 0xce, 0xcf, 0x96, 0xd6, 0xfa, 0x27, 0xcb, 0xe8, 0xf8, 0x64, 0x79, 0x35, 0xf6, 0xc2, 0x28,
	0xc0, 0x89, 0xdf, 0x42, 0xa5, 0xcc, 0x46, 0x78, 0xf2, 0x37, 0x24, 0x19, 0x6f, 0xea, 0x09, 0x41,
	0xf3, 0x9b, 0xa2, 0xf9, 0xf9, 0x1c, 0x34, 0x8c, 0x37, 0xb9, 0xc7, 0x1d, 0x8b, 0xb3, 0x90, 0x40,
	0x85, 0x3a, 0x0f, 0x33, 0x3b, 0x3c, 0x18, 0x8b, 0xfe, 0x1e, 0x86, 0x39, 0xc6, 0x6f, 0xf5, 0xb8,
	0xaf, 0xec, 0x64, 0x0b, 0xb4, 0xff, 0xeb, 0x37, 0xb9, 0x15, 0x4c, 0x17, 0xbc, 0x02, 0x93, 0x25,
	0xd0, 0x6a, 0xa6, 0x67, 0xf1, 0x8e, 0x0c, 0x9e, 0xa9, 0x13, 0xc9, 0x41, 0xb6, 0xca, 0x7d, 0xdf,
	0x6c, 0x71, 0xc3, 0xf4, 0xdb, 0x7a, 0x52, 0x3c, 0x8c, 0x9b, 0x54, 0x60, 0x2f, 0x30, 0xcc, 0x32,
	0xee, 0xf7, 0x3a, 0x97, 0x1c, 0xd7, 0x7f, 0x90, 0x51, 0xf9, 0x5e, 0x48, 0xd5, 0x88, 0x84, 0xe8,
	0x90, 0xa9, 0x99, 0xfb, 0x1d, 0xd7, 0x6c, 0xa8, 0x5c, 0xa2, 0xa3, 0xca, 0xe3, 0x18, 0x03, 0x5c,
	0xdf, 0xdf, 0xe5, 0x2a, 0x8b, 0x7f, 0x41, 0x2b, 0xbb, 0x5d, 0xd3, 0x76, 0x54, 0x16, 0xd3, 0xbd,
	0x5d, 0x71, 0x5c, 0x7a, 0x32, 0x79, 0xf8, 0x2a, 0x8c, 0xb5, 0xcc, 0xad, 0x8e, 0xe9, 0x99, 0x81,
	0xed, 0x3a, 0x2a, 0xa9, 0x49, 0xb3, 0x4a, 0xee, 0x65, 0x02, 0x60, 0xd3, 0x6d, 0x5c, 0x8d, 0xe4,
	0x36, 0x20, 0x15, 0xc6, 0x2a, 0x33, 0xfa, 0xd8, 0xeb, 0x23, 0xa0, 0xe4, 0x06, 0x64, 0xab, 0xa6,
	0xd5, 0xb6, 0x1d, 0x1e, 0xea, 0xa1, 0xa7, 0x72, 0x38, 0x3f, 0x57, 0xfa, 0x5d, 0x31, 0x15, 0xce,
	0xc1, 0x14, 0x43, 0xb3, 0x38, 0x95, 0xd2, 0xf3, 0x55, 0x12, 0x16, 0xe4, 0x3d, 0xdd, 0xb0, 0x02,
	0x7b, 0xcf, 0x0c, 0xae, 0x86, 0xb2, 0x5b, 0xa0, 0x55, 0x79, 0xd7, 0xf5, 0xf6, 0xa7, 0xd3, 0x56,
	0x81, 0xc9, 0x0e, 0xa4, 0x2b, 0x5d, 0xb3, 0x25, 0x75, 0x9d, 0x36, 0x28, 0x49, 0x11, 0xb6, 0x99,
	0x8a, 0x5f, 0x0b, 0xfb, 0x76, 0x10, 0x56, 0x2a, 0x9d, 0xc3, 0xf9, 0x2f, 0x58, 0xdc, 0x14, 0x4a,
	0x5a, 0x33, 0x3d, 0xee, 0x04, 0xba, 0x76, 0x11, 0x49, 0x25, 0x07, 0xa1, 0x00, 0x15, 0xbf, 0xcc,
	0x3b, 0xbc, 0x65, 0x06, 0x5c, 0xcf, 0x88, 0xd7, 0xc5, 0x2c, 0xaa, 0xbe, 0xcf, 0x93, 0x30, 0xaf,
	0xea, 0xdb, 0xe5, 0x4e, 0xe3, 0x73, 0x71, 0x3f, 0x55, 0x71, 0xd5, 0x10, 0xbe, 0x16, 0x84, 0xd5,
	0xd0, 0xa6, 0x1e, 0xc2, 0x02, 0xaf, 0x6a, 0x77, 0x27, 0x01, 0x4b, 0xb2, 0x76, 0x65, 0x6e, 0x5e,
	0xa5, 0xaf, 0x73, 0x4c, 0x8b, 0xe4, 0xa5, 0x68, 0xf1, 0x20, 0x05, 0x9a, 0xca, 0xfd, 0x17, 0xc8,
	0xa8, 0xad, 0x48, 0x6f, 0xe4, 0x70, 0x3e, 0xbb, 0xbe, 0x58, 0x50, 0xcb, 0xd6, 0xd8, 0xb2, 0x64,
	0x20, 0x16, 0xf9, 0x91, 0x9f, 0x20, 0x2d, 0xb7, 0x23, 0x2e, 0x00, 0xdf, 0x44, 0x80, 0xd8, 0x16,
	0x65, 0x20, 0x26, 0x7d, 0xc8, 0x2a, 0x24, 0x77, 0x78, 0xa0, 0x37, 0x85, 0xeb, 0x7c, 0xe4, 0xfa,
	0x6e, 0x8d, 0x31, 0x10, 0x0b, 0x9f, 0x93, 0xf5, 0x91, 0x68, 0x7d, 0x3c, 0x1e, 0xc7, 0xd8, 0x7a,
	0x13, 0xc6, 0x11, 0x09, 0x53, 0x0c, 0x93, 0x08, 0x37, 0x0c, 0xfd, 0x61, 0x42, 0x40, 0x16, 0x46,
	0x90, 0xd1, 0xe2, 0x61, 0x20, 0xa6, 0xdc, 0xc8, 0x8f, 0x90, 0x12, 0x7d, 0xff, 0x91, 0x74, 0x27,
	0x91, 0xfb, 0x68, 0xbe, 0x1b, 0x88, 0x09, 0x97, 0xd0, 0x55, 0x0c, 0x9b, 0xc7, 0x13, 0xae, 0xa3,
	0x69, 0x19, 0xba, 0x8a, 0xa1, 0xb2, 0x0d, 0x5f, 0x8e, 0xf7, 0x7c, 0xfd, 0x89, 0x04, 0xfd, 0x10,
	0x81, 0x3e, 0x34, 0x12, 0x0c, 0xc4, 0x26, 0x60, 0xe4, 0x2f, 0xc8, 0xc6, 0x9a, 0x8b, 0xfe, 0x54,
	0xb2, 0x7c, 0x3b, 0xc1, 0x32, 0x6a, 0x3c, 0x06, 0x62, 0x71, 0x00, 0xa9, 0xc2, 0xd7, 0x93, 0x17,
	0x5c, 0x7f, 0x26, 0x49, 0xe8, 0x38, 0xc9, 0xe4, 0x17, 0x60, 0x20, 0xf6, 0x1e, 0xb4, 0x94, 0x81,
	0x74, 0xcf, 0xb1, 0x5d, 0xa7, 0xf4, 0x47, 0x7f, 0x40, 0xd1, 0xe1, 0x80, 0xa2, 0xa3, 0x01, 0x45,
	0x67, 0x03, 0x8a, 0x6f, 0x0f, 0x29, 0x3e, 0x18, 0x52, 0xdc, 0x1f, 0x52, 0x7c, 0x38, 0xa4, 0xf8,
	0xf5, 0x90, 0xe2, 0x37, 0x43, 0x8a, 0xce, 0x86, 0x14, 0xdf, 0x3d, 0xa5, 0xe8, 0xf0, 0x94, 0xa2,
	0xa3, 0x53, 0x8a, 0xea, 0x9a, 0xd8, 0xbc, 0x7f, 0x7d, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xfe,
	0x8b, 0xdd, 0xcf, 0x0b, 0x00, 0x00,
}

func (this *GenesisRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisRecord)
	if !ok {
		that2, ok := that.(GenesisRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ChildRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildRecord)
	if !ok {
		that2, ok := that.(ChildRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrevChild.Equal(that1.PrevChild) {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	return true
}
func (this *JetRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JetRecord)
	if !ok {
		that2, ok := that.(JetRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRecord)
	if !ok {
		that2, ok := that.(RequestRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !bytes.Equal(this.Parcel, that1.Parcel) {
		return false
	}
	if !bytes.Equal(this.MessageHash, that1.MessageHash) {
		return false
	}
	return true
}
func (this *ResultRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResultRecord)
	if !ok {
		that2, ok := that.(ResultRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *TypeRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeRecord)
	if !ok {
		that2, ok := that.(TypeRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.TypeDeclaration, that1.TypeDeclaration) {
		return false
	}
	return true
}
func (this *CodeRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CodeRecord)
	if !ok {
		that2, ok := that.(CodeRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Code.Equal(that1.Code) {
		return false
	}
	if !this.MachineType.Equal(that1.MachineType) {
		return false
	}
	return true
}
func (this *ObjectActivateRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectActivateRecord)
	if !ok {
		that2, ok := that.(ObjectActivateRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Memory.Equal(that1.Memory) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	if this.IsPrototype != that1.IsPrototype {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	if this.IsDelegate != that1.IsDelegate {
		return false
	}
	return true
}
func (this *ObjectAmendRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectAmendRecord)
	if !ok {
		that2, ok := that.(ObjectAmendRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Memory.Equal(that1.Memory) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	if this.IsPrototype != that1.IsPrototype {
		return false
	}
	if !this.PrevState.Equal(that1.PrevState) {
		return false
	}
	return true
}
func (this *ObjectDeactivateRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectDeactivateRecord)
	if !ok {
		that2, ok := that.(ObjectDeactivateRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.PrevState.Equal(that1.PrevState) {
		return false
	}
	return true
}
func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Union == nil {
		if this.Union != nil {
			return false
		}
	} else if this.Union == nil {
		return false
	} else if !this.Union.Equal(that1.Union) {
		return false
	}
	return true
}
func (this *Record_Genesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Genesis)
	if !ok {
		that2, ok := that.(Record_Genesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Genesis.Equal(that1.Genesis) {
		return false
	}
	return true
}
func (this *Record_Child) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Child)
	if !ok {
		that2, ok := that.(Record_Child)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Child.Equal(that1.Child) {
		return false
	}
	return true
}
func (this *Record_Jet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Jet)
	if !ok {
		that2, ok := that.(Record_Jet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Jet.Equal(that1.Jet) {
		return false
	}
	return true
}
func (this *Record_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Request)
	if !ok {
		that2, ok := that.(Record_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *Record_Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Result)
	if !ok {
		that2, ok := that.(Record_Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *Record_Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Type)
	if !ok {
		that2, ok := that.(Record_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Record_Code) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_Code)
	if !ok {
		that2, ok := that.(Record_Code)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Code.Equal(that1.Code) {
		return false
	}
	return true
}
func (this *Record_ObjectActivate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_ObjectActivate)
	if !ok {
		that2, ok := that.(Record_ObjectActivate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectActivate.Equal(that1.ObjectActivate) {
		return false
	}
	return true
}
func (this *Record_ObjectAmend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_ObjectAmend)
	if !ok {
		that2, ok := that.(Record_ObjectAmend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectAmend.Equal(that1.ObjectAmend) {
		return false
	}
	return true
}
func (this *Record_ObjectDeactivate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record_ObjectDeactivate)
	if !ok {
		that2, ok := that.(Record_ObjectDeactivate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectDeactivate.Equal(that1.ObjectDeactivate) {
		return false
	}
	return true
}

type GenesisRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
}

func (this *GenesisRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GenesisRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGenesisRecordFromFace(this)
}

func NewGenesisRecordFromFace(that GenesisRecordFace) *GenesisRecord {
	this := &GenesisRecord{}
	return this
}

type ChildRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPrevChild() github_com_insolar_insolar_insolar.ID
	GetRef() github_com_insolar_insolar_insolar.Reference
}

func (this *ChildRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ChildRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewChildRecordFromFace(this)
}

func (this *ChildRecord) GetPrevChild() github_com_insolar_insolar_insolar.ID {
	return this.PrevChild
}

func (this *ChildRecord) GetRef() github_com_insolar_insolar_insolar.Reference {
	return this.Ref
}

func NewChildRecordFromFace(that ChildRecordFace) *ChildRecord {
	this := &ChildRecord{}
	this.PrevChild = that.GetPrevChild()
	this.Ref = that.GetRef()
	return this
}

type JetRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
}

func (this *JetRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *JetRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewJetRecordFromFace(this)
}

func NewJetRecordFromFace(that JetRecordFace) *JetRecord {
	this := &JetRecord{}
	return this
}

type RequestRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetObject() github_com_insolar_insolar_insolar.ID
	GetParcel() []byte
	GetMessageHash() []byte
}

func (this *RequestRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *RequestRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewRequestRecordFromFace(this)
}

func (this *RequestRecord) GetObject() github_com_insolar_insolar_insolar.ID {
	return this.Object
}

func (this *RequestRecord) GetParcel() []byte {
	return this.Parcel
}

func (this *RequestRecord) GetMessageHash() []byte {
	return this.MessageHash
}

func NewRequestRecordFromFace(that RequestRecordFace) *RequestRecord {
	this := &RequestRecord{}
	this.Object = that.GetObject()
	this.Parcel = that.GetParcel()
	this.MessageHash = that.GetMessageHash()
	return this
}

type ResultRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetObject() github_com_insolar_insolar_insolar.ID
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetPayload() []byte
}

func (this *ResultRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ResultRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewResultRecordFromFace(this)
}

func (this *ResultRecord) GetObject() github_com_insolar_insolar_insolar.ID {
	return this.Object
}

func (this *ResultRecord) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *ResultRecord) GetPayload() []byte {
	return this.Payload
}

func NewResultRecordFromFace(that ResultRecordFace) *ResultRecord {
	this := &ResultRecord{}
	this.Object = that.GetObject()
	this.Request = that.GetRequest()
	this.Payload = that.GetPayload()
	return this
}

type TypeRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetTypeDeclaration() []byte
}

func (this *TypeRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *TypeRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewTypeRecordFromFace(this)
}

func (this *TypeRecord) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *TypeRecord) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *TypeRecord) GetTypeDeclaration() []byte {
	return this.TypeDeclaration
}

func NewTypeRecordFromFace(that TypeRecordFace) *TypeRecord {
	this := &TypeRecord{}
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.TypeDeclaration = that.GetTypeDeclaration()
	return this
}

type CodeRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetCode() github_com_insolar_insolar_insolar.ID
	GetMachineType() github_com_insolar_insolar_insolar.MachineType
}

func (this *CodeRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CodeRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCodeRecordFromFace(this)
}

func (this *CodeRecord) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *CodeRecord) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *CodeRecord) GetCode() github_com_insolar_insolar_insolar.ID {
	return this.Code
}

func (this *CodeRecord) GetMachineType() github_com_insolar_insolar_insolar.MachineType {
	return this.MachineType
}

func NewCodeRecordFromFace(that CodeRecordFace) *CodeRecord {
	this := &CodeRecord{}
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.Code = that.GetCode()
	this.MachineType = that.GetMachineType()
	return this
}

type ObjectActivateRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetMemory() github_com_insolar_insolar_insolar.ID
	GetImage() github_com_insolar_insolar_insolar.Reference
	GetIsPrototype() bool
	GetParent() github_com_insolar_insolar_insolar.Reference
	GetIsDelegate() bool
}

func (this *ObjectActivateRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ObjectActivateRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewObjectActivateRecordFromFace(this)
}

func (this *ObjectActivateRecord) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *ObjectActivateRecord) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *ObjectActivateRecord) GetMemory() github_com_insolar_insolar_insolar.ID {
	return this.Memory
}

func (this *ObjectActivateRecord) GetImage() github_com_insolar_insolar_insolar.Reference {
	return this.Image
}

func (this *ObjectActivateRecord) GetIsPrototype() bool {
	return this.IsPrototype
}

func (this *ObjectActivateRecord) GetParent() github_com_insolar_insolar_insolar.Reference {
	return this.Parent
}

func (this *ObjectActivateRecord) GetIsDelegate() bool {
	return this.IsDelegate
}

func NewObjectActivateRecordFromFace(that ObjectActivateRecordFace) *ObjectActivateRecord {
	this := &ObjectActivateRecord{}
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.Memory = that.GetMemory()
	this.Image = that.GetImage()
	this.IsPrototype = that.GetIsPrototype()
	this.Parent = that.GetParent()
	this.IsDelegate = that.GetIsDelegate()
	return this
}

type ObjectAmendRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetMemory() github_com_insolar_insolar_insolar.ID
	GetImage() github_com_insolar_insolar_insolar.Reference
	GetIsPrototype() bool
	GetPrevState() github_com_insolar_insolar_insolar.ID
}

func (this *ObjectAmendRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ObjectAmendRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewObjectAmendRecordFromFace(this)
}

func (this *ObjectAmendRecord) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *ObjectAmendRecord) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *ObjectAmendRecord) GetMemory() github_com_insolar_insolar_insolar.ID {
	return this.Memory
}

func (this *ObjectAmendRecord) GetImage() github_com_insolar_insolar_insolar.Reference {
	return this.Image
}

func (this *ObjectAmendRecord) GetIsPrototype() bool {
	return this.IsPrototype
}

func (this *ObjectAmendRecord) GetPrevState() github_com_insolar_insolar_insolar.ID {
	return this.PrevState
}

func NewObjectAmendRecordFromFace(that ObjectAmendRecordFace) *ObjectAmendRecord {
	this := &ObjectAmendRecord{}
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.Memory = that.GetMemory()
	this.Image = that.GetImage()
	this.IsPrototype = that.GetIsPrototype()
	this.PrevState = that.GetPrevState()
	return this
}

type ObjectDeactivateRecordFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetPrevState() github_com_insolar_insolar_insolar.ID
}

func (this *ObjectDeactivateRecord) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ObjectDeactivateRecord) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewObjectDeactivateRecordFromFace(this)
}

func (this *ObjectDeactivateRecord) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *ObjectDeactivateRecord) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *ObjectDeactivateRecord) GetPrevState() github_com_insolar_insolar_insolar.ID {
	return this.PrevState
}

func NewObjectDeactivateRecordFromFace(that ObjectDeactivateRecordFace) *ObjectDeactivateRecord {
	this := &ObjectDeactivateRecord{}
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.PrevState = that.GetPrevState()
	return this
}

func (this *GenesisRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&record.GenesisRecord{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&record.ChildRecord{")
	s = append(s, "PrevChild: "+fmt.Sprintf("%#v", this.PrevChild)+",\n")
	s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JetRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&record.JetRecord{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&record.RequestRecord{")
	s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	s = append(s, "Parcel: "+fmt.Sprintf("%#v", this.Parcel)+",\n")
	s = append(s, "MessageHash: "+fmt.Sprintf("%#v", this.MessageHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResultRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&record.ResultRecord{")
	s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TypeRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&record.TypeRecord{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "TypeDeclaration: "+fmt.Sprintf("%#v", this.TypeDeclaration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CodeRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&record.CodeRecord{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectActivateRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&record.ObjectActivateRecord{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "IsPrototype: "+fmt.Sprintf("%#v", this.IsPrototype)+",\n")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "IsDelegate: "+fmt.Sprintf("%#v", this.IsDelegate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectAmendRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&record.ObjectAmendRecord{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "IsPrototype: "+fmt.Sprintf("%#v", this.IsPrototype)+",\n")
	s = append(s, "PrevState: "+fmt.Sprintf("%#v", this.PrevState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectDeactivateRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&record.ObjectDeactivateRecord{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "PrevState: "+fmt.Sprintf("%#v", this.PrevState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&record.Record{")
	if this.Union != nil {
		s = append(s, "Union: "+fmt.Sprintf("%#v", this.Union)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Record_Genesis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Genesis{` +
		`Genesis:` + fmt.Sprintf("%#v", this.Genesis) + `}`}, ", ")
	return s
}
func (this *Record_Child) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Child{` +
		`Child:` + fmt.Sprintf("%#v", this.Child) + `}`}, ", ")
	return s
}
func (this *Record_Jet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Jet{` +
		`Jet:` + fmt.Sprintf("%#v", this.Jet) + `}`}, ", ")
	return s
}
func (this *Record_Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Request{` +
		`Request:` + fmt.Sprintf("%#v", this.Request) + `}`}, ", ")
	return s
}
func (this *Record_Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Result{` +
		`Result:` + fmt.Sprintf("%#v", this.Result) + `}`}, ", ")
	return s
}
func (this *Record_Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Type{` +
		`Type:` + fmt.Sprintf("%#v", this.Type) + `}`}, ", ")
	return s
}
func (this *Record_Code) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_Code{` +
		`Code:` + fmt.Sprintf("%#v", this.Code) + `}`}, ", ")
	return s
}
func (this *Record_ObjectActivate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_ObjectActivate{` +
		`ObjectActivate:` + fmt.Sprintf("%#v", this.ObjectActivate) + `}`}, ", ")
	return s
}
func (this *Record_ObjectAmend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_ObjectAmend{` +
		`ObjectAmend:` + fmt.Sprintf("%#v", this.ObjectAmend) + `}`}, ", ")
	return s
}
func (this *Record_ObjectDeactivate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Record_ObjectDeactivate{` +
		`ObjectDeactivate:` + fmt.Sprintf("%#v", this.ObjectDeactivate) + `}`}, ", ")
	return s
}
func valueToGoStringRecord(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GenesisRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChildRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PrevChild.Size()))
	n1, err := m.PrevChild.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Ref.Size()))
	n2, err := m.Ref.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *JetRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JetRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Object.Size()))
	n3, err := m.Object.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Parcel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Parcel)))
		i += copy(dAtA[i:], m.Parcel)
	}
	if len(m.MessageHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.MessageHash)))
		i += copy(dAtA[i:], m.MessageHash)
	}
	return i, nil
}

func (m *ResultRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Object.Size()))
	n4, err := m.Object.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n5, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *TypeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n6, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n7, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.TypeDeclaration) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.TypeDeclaration)))
		i += copy(dAtA[i:], m.TypeDeclaration)
	}
	return i, nil
}

func (m *CodeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n8, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n9, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Code.Size()))
	n10, err := m.Code.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.MachineType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.MachineType))
	}
	return i, nil
}

func (m *ObjectActivateRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectActivateRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n11, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n12, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Memory.Size()))
	n13, err := m.Memory.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x22
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Image.Size()))
	n14, err := m.Image.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.IsPrototype {
		dAtA[i] = 0x28
		i++
		if m.IsPrototype {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Parent.Size()))
	n15, err := m.Parent.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.IsDelegate {
		dAtA[i] = 0x38
		i++
		if m.IsDelegate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ObjectAmendRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectAmendRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n16, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n17, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Memory.Size()))
	n18, err := m.Memory.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x22
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Image.Size()))
	n19, err := m.Image.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.IsPrototype {
		dAtA[i] = 0x28
		i++
		if m.IsPrototype {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PrevState.Size()))
	n20, err := m.PrevState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *ObjectDeactivateRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectDeactivateRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n21, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n22, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PrevState.Size()))
	n23, err := m.PrevState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Union != nil {
		nn24, err := m.Union.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	return i, nil
}

func (m *Record_Genesis) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Genesis != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Genesis.Size()))
		n25, err := m.Genesis.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Record_Child) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Child != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Child.Size()))
		n26, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Record_Jet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Jet != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Jet.Size()))
		n27, err := m.Jet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *Record_Request) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Request != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
		n28, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Record_Result) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Result != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Result.Size()))
		n29, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Record_Type) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Type != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Type.Size()))
		n30, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Record_Code) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Code != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Code.Size()))
		n31, err := m.Code.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *Record_ObjectActivate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ObjectActivate != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.ObjectActivate.Size()))
		n32, err := m.ObjectActivate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *Record_ObjectAmend) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ObjectAmend != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.ObjectAmend.Size()))
		n33, err := m.ObjectAmend.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Record_ObjectDeactivate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ObjectDeactivate != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.ObjectDeactivate.Size()))
		n34, err := m.ObjectDeactivate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GenesisRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChildRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrevChild.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Ref.Size()
	n += 1 + l + sovRecord(uint64(l))
	return n
}

func (m *JetRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Object.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = len(m.Parcel)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.MessageHash)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *ResultRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Object.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *TypeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = len(m.TypeDeclaration)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *CodeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Code.Size()
	n += 1 + l + sovRecord(uint64(l))
	if m.MachineType != 0 {
		n += 1 + sovRecord(uint64(m.MachineType))
	}
	return n
}

func (m *ObjectActivateRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Memory.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Image.Size()
	n += 1 + l + sovRecord(uint64(l))
	if m.IsPrototype {
		n += 2
	}
	l = m.Parent.Size()
	n += 1 + l + sovRecord(uint64(l))
	if m.IsDelegate {
		n += 2
	}
	return n
}

func (m *ObjectAmendRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Memory.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Image.Size()
	n += 1 + l + sovRecord(uint64(l))
	if m.IsPrototype {
		n += 2
	}
	l = m.PrevState.Size()
	n += 1 + l + sovRecord(uint64(l))
	return n
}

func (m *ObjectDeactivateRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 1 + l + sovRecord(uint64(l))
	l = m.PrevState.Size()
	n += 1 + l + sovRecord(uint64(l))
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Union != nil {
		n += m.Union.Size()
	}
	return n
}

func (m *Record_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Genesis != nil {
		l = m.Genesis.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_Child) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Child != nil {
		l = m.Child.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_Jet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jet != nil {
		l = m.Jet.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = m.Code.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_ObjectActivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectActivate != nil {
		l = m.ObjectActivate.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_ObjectAmend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectAmend != nil {
		l = m.ObjectAmend.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Record_ObjectDeactivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectDeactivate != nil {
		l = m.ObjectDeactivate.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func sovRecord(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GenesisRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenesisRecord{`,
		`}`,
	}, "")
	return s
}
func (this *ChildRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildRecord{`,
		`PrevChild:` + fmt.Sprintf("%v", this.PrevChild) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JetRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JetRecord{`,
		`}`,
	}, "")
	return s
}
func (this *RequestRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRecord{`,
		`Object:` + fmt.Sprintf("%v", this.Object) + `,`,
		`Parcel:` + fmt.Sprintf("%v", this.Parcel) + `,`,
		`MessageHash:` + fmt.Sprintf("%v", this.MessageHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResultRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResultRecord{`,
		`Object:` + fmt.Sprintf("%v", this.Object) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeRecord{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`TypeDeclaration:` + fmt.Sprintf("%v", this.TypeDeclaration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CodeRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodeRecord{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectActivateRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectActivateRecord{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`IsPrototype:` + fmt.Sprintf("%v", this.IsPrototype) + `,`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`IsDelegate:` + fmt.Sprintf("%v", this.IsDelegate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectAmendRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectAmendRecord{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`IsPrototype:` + fmt.Sprintf("%v", this.IsPrototype) + `,`,
		`PrevState:` + fmt.Sprintf("%v", this.PrevState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectDeactivateRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectDeactivateRecord{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`PrevState:` + fmt.Sprintf("%v", this.PrevState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record{`,
		`Union:` + fmt.Sprintf("%v", this.Union) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Genesis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Genesis{`,
		`Genesis:` + strings.Replace(fmt.Sprintf("%v", this.Genesis), "GenesisRecord", "GenesisRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Child) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Child{`,
		`Child:` + strings.Replace(fmt.Sprintf("%v", this.Child), "ChildRecord", "ChildRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Jet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Jet{`,
		`Jet:` + strings.Replace(fmt.Sprintf("%v", this.Jet), "JetRecord", "JetRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Request{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "RequestRecord", "RequestRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Result{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ResultRecord", "ResultRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Type{`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "TypeRecord", "TypeRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_Code) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_Code{`,
		`Code:` + strings.Replace(fmt.Sprintf("%v", this.Code), "CodeRecord", "CodeRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_ObjectActivate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_ObjectActivate{`,
		`ObjectActivate:` + strings.Replace(fmt.Sprintf("%v", this.ObjectActivate), "ObjectActivateRecord", "ObjectActivateRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_ObjectAmend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_ObjectAmend{`,
		`ObjectAmend:` + strings.Replace(fmt.Sprintf("%v", this.ObjectAmend), "ObjectAmendRecord", "ObjectAmendRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record_ObjectDeactivate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record_ObjectDeactivate{`,
		`ObjectDeactivate:` + strings.Replace(fmt.Sprintf("%v", this.ObjectDeactivate), "ObjectDeactivateRecord", "ObjectDeactivateRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRecord(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GenesisRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevChild", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JetRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JetRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JetRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parcel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parcel = append(m.Parcel[:0], dAtA[iNdEx:postIndex]...)
			if m.Parcel == nil {
				m.Parcel = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHash = append(m.MessageHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageHash == nil {
				m.MessageHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeDeclaration", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeDeclaration = append(m.TypeDeclaration[:0], dAtA[iNdEx:postIndex]...)
			if m.TypeDeclaration == nil {
				m.TypeDeclaration = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Code.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			m.MachineType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MachineType |= github_com_insolar_insolar_insolar.MachineType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectActivateRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectActivateRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectActivateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrototype", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrototype = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelegate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelegate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectAmendRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectAmendRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectAmendRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrototype", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrototype = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectDeactivateRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectDeactivateRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectDeactivateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenesisRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Genesis{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Child{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JetRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Jet{v}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Request{v}
			iNdEx = postIndex
		case 300:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResultRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Result{v}
			iNdEx = postIndex
		case 301:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TypeRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Type{v}
			iNdEx = postIndex
		case 302:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CodeRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_Code{v}
			iNdEx = postIndex
		case 303:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectActivate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectActivateRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_ObjectActivate{v}
			iNdEx = postIndex
		case 304:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectAmend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectAmendRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_ObjectAmend{v}
			iNdEx = postIndex
		case 305:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectDeactivate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectDeactivateRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Record_ObjectDeactivate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRecord
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRecord
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRecord(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRecord
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRecord = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord   = fmt.Errorf("proto: integer overflow")
)
